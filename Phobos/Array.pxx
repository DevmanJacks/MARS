// Array functionality

// export struct Array<T> {
//     _length:   Int
//     _elements: unsafe []T
// }

// export func Array<T>(length: Int) -> ^Array<T> {
//     var array: ^Array<T> = HeapAlloc(length * SizeOf(T) + SizeOf(Int))
//     array.length = length
//     return array
// }

// export func Array<T>.SetValueAtIndex(index: Int, value: T) -> IndexError {
//     if index < 0 || index >= length {
//         return IndexError.IndexOutOfRange
//     }

//     array[index] = value
//     return IndexError.None
// }

// export func Array<T>.ValueAtIndex(index: Int) -> (value: T, error: IndexError) {
//     if index < 0 || index >= length {
//         return (nil, IndexError.IndexOutOfRange)
//     }

//     value := array[index]
//     return (value, IndexError.None)
// }